---
title: "RCBD"
format: html
---

# Introduction  
The goals of this exercise are to:  
- Create an analytical workflow for an **RCBD**, from data import through publication-ready plot  
- Understand each of its components  

# a) Setup  
Here is where we load the packages we will use.  
```{r setup}
# Loading packages
library(tidyverse) # for data wrangling and plotting
library(car) # for Anova function
library(lme4)
library(broom) # for model residuals extraction
library(emmeans) # for model mean extraction
library(multcomp) # for pairwise comparison letter display
```

**IMPORTANT NOTE**:  
We are using in this exercise the same data set as the one used for the CRD exercise. This is only for **teaching purposes!!**  

In your own analysis, you should always analyze a given designed study data set based on the design that it was implemented with.  
You should NOT analyze a given designed study with a different design than what it was implemented with.  

This is not an option!  

```{r data import}
rcbd_df <- read_csv("../data/wheat_nk_balkh.csv")

rcbd_df
```

# b) EDA tables  
```{r summary}
summary(rcbd_df)
```

```{r glimpse}
glimpse(rcbd_df)
```
#glmpse funcion to see how variables are seen by R
#we need to covert the 4 blocks (trt 1-9) values to be seen as categorical instead of numerical <dbl>

# c) Wrangling
```{r rcbd_dfw}
rcbd_dfw <- rcbd_df %>%
  mutate(rep = factor(rep),
         nrate_kgha = factor(nrate_kgha),
         krate_kgha = factor(krate_kgha) 
         ) %>%
  mutate(trtname = paste0(nrate_kgha,"+",krate_kgha))

#what we are doing here is overiding rep with factor and creating a treatment name column using funciton paste0, and also chaninging variabel type form numerical to categorical or a factor
rcbd_dfw
```
#now  rep, nrate, krate are all factors and trt name is categorical

```{r rcbd_dfw}
summary(rcbd_dfw)
```
Number of replicates: 4  
Number o treatments: 3 N rates x 3 K rates = 9  
Number of observations: 4 x 9 = 36  
Yield: from 2795 to 7445 kg/ha  

#R no longer gives statistical summaries of the catergorical variables 

# d) EDA plots  
```{r n boxplot}
ggplot(rcbd_dfw, aes(x = nrate_kgha, 
                    y = yield_kgha,
                    color = nrate_kgha
                    )) +
  geom_boxplot() +
  geom_jitter() +
  #function jitter shows the points of data, staggerred so yo can see them 
  theme(legend.position = "none")
#theme legend. posiiton to turn off legend
```

```{r k boxplot}
ggplot(rcbd_dfw, aes(x = krate_kgha, 
                    y = yield_kgha,
                    color = krate_kgha)) +
  geom_boxplot() +
  geom_jitter() +
  theme(legend.position = "none")

#how to represent N and K with one another?
# we could replace krate_kgh in the two spots above with trtname coloum 
```



```{r nk boxplot}
ggplot(rcbd_dfw, aes(x = nrate_kgha, 
                    y = yield_kgha,
                    color = nrate_kgha)) +
  geom_boxplot() +
  geom_jitter() +
  facet_grid(.~krate_kgha) +
  theme(legend.position = "none")
  
#facet grid makes different facets for different levels you have , for us it looks at K rate and creates its own plots for each diferent value, the facets being 0, 30, and 60 
# the .~ makes it look dislay 
  

```

# e) Statistical model  
## Set-to-zero vs. sum-to-zero  
In R, the default contrast type is set-to-zero.  

In research, we normally are interested in sum-to-zero contrasts.  

Below we change the default to sum-to-zero ("contr.sum") before fitting the model.


```{r model}
# Changing to sum-to-zero contrast
options(contrasts = c("contr.sum", "contr.poly"))

# Model fitting
rcbd_mod <- lm(yield_kgha ~ rep + nrate_kgha*krate_kgha, data = rcbd_dfw)

# lm function runs a model 
# its good to runa. seperate model for each factor you are looking at so height, yeild, nitrogen, carbon.... etc
#the * breask down main effects of both k rate and n rate and the interaction between both, you could alternativley write it all like # rcbd_mod <- lm(yield_kgha ~ nrate_kgha + krate_kgha + nrate_kgha:krate_kgha)
# including rep ater the ~ is the difference betwen an rcbd and cbd

# Summary
summary(rcbd_mod)
```

## Model specification tips  
Instead of specifying 
          `nrate_kgha + krate_kgha + nrate_kgha:krate_kgha`,  
we could have just used  
                   `nrate_kgha*krate_kgha`.  

R interprets the `*` as "give me all main effects and interactions".

The more interacting effects a model has, the more efficient using the * becomes.  

# f) ANOVA table  
The `Anova()` function allows us to use **type 3 sum of squares**.  

The common functions `aov()` and `anova()` use type 1 SS, which is the wrong choice IF have unbalanced data.

If data is balanced, type 1 and 3 give same results.  

For sake of peace of mind, it is simpler to just always use type 3.  

```{r ANOVA}
Anova(rcbd_mod, type=3)


#alwasy use function Anova() with type=3 speciied for running anova models 
```
# so looking at the anova table the intercept and interation are significant, k rate and n rate aone were not significant, and if we looked at p value 0.1 then rep would be significant but with 0.05 it isnt 


#alwasy start looking at bottome of table, since bottom is most complicaed (in this case its our interaction), looking at most complex significance in anova table is what should walsys be focused on 
#based on sig of anova tabel it detemrines how we take out means and 



Notice how rep (i.e., block in this case) has a significant effect.  

This means that we **did well by blocking**, as it was able to absorb some of the overall variability and remove it from the error. Remember how **decreasing error SS** was one way to improve the model statistical power.  

Since the interaction is significant here, we should extract means and perform pairwise comparisons for the interaction term.

Before we do that, let's check our model assumptions. Remember, a model is only valid for inference (i.e., means and pwc) IF if fulfills the linear model assumptions.  

# g) Linear model assumptions  
## Extracting residuals
First, let's extract our model residuals, and also create studentized residuals.  

```{r rcbd_resid}
rcbd_resid <- augment(rcbd_mod) %>%
  mutate(.studresid=rstudent(rcbd_mod))

#augment fucntion makes residual columns
#studeresid normalizes our residuals for the data and model 

rcbd_resid
```
#raw data remians the same, change model, you change residuals, so we have to check residuals with the model we use


Now, let's recap the linear model assumptions:  

- Residual independence (no pattern)  
- Residual variance homogeneity (homoscedasticity)  
- Residual normality (discuss this!)  
- Outlier detection (< -3 or > 3)  

## Residual independence  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: clear pattern, for example, quadratic shape.  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  



```{r }
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()


#geom_smooth runs a line through the plots, deally it would be striaght with the 0 line, but this is still acceptable

```
#from the residualplot above the mean of residuals is around 0, and heir is no pattern, and no points seem to be above or below 3 




Run the plot above with and without `geom_smooth()`.  
Notice how it helps to see a pattern that otherwise it's hard to detect visually.  

Although it seems like there is some pattern, I wouldn't worry here since the error of the smooth line comprises 0 in the y-axis.  

## Residual homoscedasticity  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: no clear pattern in residuals, random cloud of points.  
- What we do not want to see: residuals increasing as fitted value increases (fan shape).  
- Adding a `geom_smooth()` helps with that conclusion. We want to see the smooth line and error bands comprising 0 on the y axis.  

```{r }
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()
```
Looks great! Next.  

## Residual normality  
- For this, we use the **quantile-quantile (QQ) plot** and **density plot**.    
- What we want to see: residuals centered around 0 and following a normal distribution.  
- What we do not want to see: skewed residuals that do not follow a normal distribution.  

On the QQ plot, we want to see residuals on the black line, meaning they follow their theoretical normal distribution.  
```{r}
ggplot(rcbd_resid, aes(sample=.studresid))+
  stat_qq(  shape = 21,
            fill = "purple", 
            size = 3,
            alpha = .7
  )+
  stat_qq_line()+
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

It's common for some residuals in the tails being off, especially with low N (N=36). Nothing to worry here.  


```{r}
ggplot(rcbd_resid, aes(x=.studresid))+
  geom_density(color = "black",
               fill = "purple",
               alpha = .7)+
  scale_x_continuous(breaks = c(-3,0,3), limits = c(-3,3))+
  theme_bw()

```
The peak of the density is slightly off, lower than 0, but nothing to worry.  

Next.  

## Residual outliers  
- For this, we use the **fitted vs. residual plot**.  
- What we want to see: most if not all residuals within [-3,3] on a studentized residual scale.  
- What we do not want to see: too many residuals > 3 or < -3, the farther away form the thresholds the worse.  
- Adding a `geom_hline()` at the thresholds helps to visualize and diagnose.   

```{r}
ggplot(rcbd_resid, aes(x=.fitted, y=.studresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()

```
All residuals are within the [-3, 3] interval, so nothing to worry here.  
Now that model assumptions have been checked and met, we can proceed to using the model for inference.  

# h) Model means  
The next step in the workflow is extracting the model means.  

Whenever we are showing means (in tables or plots), we want them to be from a model, and not simply the arithmetic mean in the raw data (like we would get with `group_by()` and `summarise()`).  

This is specially important IF the data is unbalanced (i.e., missing data), in which case model means are DIFFERENT from arithmetic means on raw data. 

Also, when extracting means from an interaction, there are few different ways of doing it, and which one we do depends on the study objectives.

Remember that it is at this level that we establish the hierarchy of how our pairwise comparisons will be performed.  

Let's extract it by comparing everything to everything else.
```{r interaction means all}
rcbd_means_all <- emmeans(rcbd_mod, ~nrate_kgha: krate_kgha)


# or you could run this: this restricts comaprisons to a given nitrogen rate
#rcbd_means_all <- emmeans(rcbd_mod, ~nrate_kgha| krate_kgha)
#this what compare the 3 n rates within a given one of the three k rates

#or to loook the other way around : this restricts comaprisons to a given k rate
#rcbd_means_all <- emmeans(rcbd_mod, ~krate_kgha| nrate_kgha)


# if a three way interaction was significantthen we could :
#rcbd_means_all <- emmeans(rcbd_mod, ~nrate_kgha: krate_kgha: prate_kgha)

#could also create more sturcture with complicated experiments 
#rcbd_means_all <- emmeans(rcbd_mod, ~nrate_kgha: krate_kgha | prate_kgha)

#if interaction arent significant but main affect are you could do: ...

rcbd_means_all
```

# i) Pairwise comparisons  
Now that we extracted means, let's perform pairwise comparisons among them.  

```{r interaction pwc all}
rcbd_cld_all <- cld(rcbd_means_all, 
                   reversed=T, 
                   adjust="none",
               Letters=letters,
               alpha = 0.05
               )


#install.packages("multcompView")

rcbd_cld_all
```

Let's do some light wrangling here to be able to plot these.  

```{r selected pwc}
rcbd_cld_selected <- rcbd_cld_all %>%
  as.data.frame() %>%
  mutate(letter = trimws(.group)) %>%
  mutate(trtname = paste0(nrate_kgha, "+", krate_kgha))



#trimws. to trim white space in a particualr clumn, in this case its the .group column where there is some staggard white spacing
#then we mutate and create a new column using paste fucntion to combine the contents of nrate and krate columns and show the values with a + in between them
rcbd_cld_selected
```

# g) Final plot  
Let's plot our results, including both **raw data** (for allowing our audience to inspect data distribution) and **statistical model summary (i.e., letter separation)** for inference purposes.    
Let's make this plot publication ready.  

```{r rcbd final plot}
ggplot() + 
  geom_boxplot(data = rcbd_dfw,
               aes(x = trtname, 
                   y = yield_kgha,
                   fill = trtname)
                   ) +
  geom_jitter(data= rcbd_dfw,
              aes(x = trtname, y = yield_kgha,
                  color = trtname
                  ),
              alpha = 0.6
              ) +
  geom_label(data = rcbd_cld_selected,
            aes(x = trtname,
                y = emmean,
                label = letter 
                ),
            
            size = 3, 
            label.padding = unit(0.1, "lines")
            ) +
  
#now changining tites 
  labs(x = "N rate + K rate (kg/ha)",
       y = " Yield(kg/ha)"
       ) +
#now changing colors (choosing viridis , either b,c,d based on type of data d for discrete variables (categorical variables, which trt name is: if variabel is continous you could use c or b ))
  
#could also use scale_clor_manual(values = c("red", "blue", "yellow" ..)) making sure to include enough colors for all variables on graph
  scale_fill_viridis_d() + 
  scale_colour_viridis_d() +
  
#now remove legend: theme_ for changing alot , theme() for changing one thing
theme(legend.position = "none")

  
#here we need to datat frames one with aw dadta and one with pair wise comparisons   



#while working under geom_label function,
#use size to change size
#use label.padding to change space of label (white space)



#now exporting to file

ggsave("../output/rcbd_means.png", 
       height = 4, 
       width = 6
       )



```




